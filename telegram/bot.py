from aiogram import Router, F, types
from aiogram.filters.command import Command
from database.engine import get_db_session
from service.utils_wallet import add_wallet
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from service.list_wallet import get_user_wallet, wallet_message

router = Router()

class AddWallet(StatesGroup):
    waiting_name = State()
    waiting_address = State()


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ Arbitrum.\n–ü–æ–∫–∞ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.")

@router.message(Command("watch"))
async def start_add_wallet(message: types.Message, state: FSMContext):
    await state.set_state(AddWallet.waiting_name)
    await message.answer("üí≠ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ")

@router.message(AddWallet.waiting_name)
async def process_wallet_name(message, state: FSMContext):
    await state.update_data(wallet_name=message.text)

    await state.set_state(AddWallet.waiting_address)
    await message.answer("ü´° –ü—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å: ")

@router.message(AddWallet.waiting_address)
async def process_wallet_address(message, state: FSMContext):
    await state.update_data(wallet_address=message.text)

    user_data = await state.get_data()
    wallet_name = user_data['wallet_name']
    wallet_address = user_data['wallet_address']
    user_id = message.from_user.id

    async with get_db_session() as session:
        status = await add_wallet(session, user_id, wallet_address, wallet_name)

        if status == "added":
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—à–µ–ª—ë–∫: **{wallet_name}** \n{wallet_address}")
        elif status == "exists":
            await message.answer(f"–ö–æ—à–µ–ª—ë–∫ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {wallet_name} \n{wallet_address}")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await state.clear()

@router.message(Command("list_wallet"))
async def list_user_wallets(message: types.Message):
    user_id = message.from_user.id

    async with get_db_session() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        wallets = await get_user_wallet(session, user_id)

        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = await wallet_message(wallets)

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        formatted_message,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )



