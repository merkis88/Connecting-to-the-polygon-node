# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π service/list_wallet.py

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.models.wallet import WatchedWallet

async def get_user_wallet(session: AsyncSession, user_id):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –ë–î"""
    try:
        query = select(WatchedWallet).where(WatchedWallet.user_id == user_id).order_by(WatchedWallet.id.desc())
        result = await session.execute(query)
        wallets = result.scalars().all()

        return [
            {
                "address": wallet.address,
                "label": wallet.label,
                "id": wallet.id
            }
            for wallet in wallets
        ]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
        return []

async def wallet_message(wallets):
    if not wallets:
        return "üì≠ **–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤**"

    message = "üóÇÔ∏è **–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:**\n\n"

    for i, wallet in enumerate(wallets, 1):
        address = wallet["address"]
        label = wallet["label"]

        message += (
            f"**{i}.** {label}\n"
            f"   üìé `{address}`\n"
            f"   üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Arbiscan](https://arbiscan.io/address/{address})\n\n"
        )

    message += (
        f"üìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(wallets)}\n\n"
    )

    return message